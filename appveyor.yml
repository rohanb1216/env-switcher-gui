environment:

  matrix:

    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.

    #- PYTHON: "C:\\Python27"
    #- PYTHON: "C:\\Python33"
    #- PYTHON: "C:\\Python34"
    - PYTHON: "C:\\Python35"
    #- PYTHON: "C:\\Python27-x64"
    #- PYTHON: "C:\\Python33-x64"
    #  DISTUTILS_USE_SDK: "1"
    #- PYTHON: "C:\\Python34-x64"
    #  DISTUTILS_USE_SDK: "1"
    - PYTHON: "C:\\Python35-x64"

install:
  # We need wheel installed to build wheels
  - "%PYTHON%\\python.exe -m pip install wheel"
  - "%PYTHON%\\python.exe -m pip install -r ci_tools/requirements-setup.txt"
  - "%PYTHON%\\python.exe -m pip install pyqt5>=5.6"
  - "%PYTHON%\\python.exe -m pip install -r ci_tools/requirements-test.txt"
  - "%PYTHON%\\python.exe -m pip install -r ci_tools/requirements-report.txt"
  - "%PYTHON%\\python.exe -m pip install -r ci_tools/requirements-doc.txt"
  - "%PYTHON%\\python.exe -m pip install pypiwin32"  # unfortunately declaring it in the extra does not use pip
  - cinst pandoc
  - pandoc -v
  - "%PYTHON%\\python.exe -m pip install ."

build: off

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  - "%PYTHON%\\python.exe setup.py test"

after_test:
  # ***packaging for releases***
  # source and wheel for PyPi >> this is already done in travis
  # - "build.cmd %PYTHON%\\python.exe setup.py sdist bdist_wheel"
  # installer for github release
  - "%PYTHON%\\python.exe setup_cx_app.py build"
  - "%PYTHON%\\python.exe setup_cx_app.py bdist_msi"
  # ***reporting >> this is already done in travis ***
  # ***documentation >> this is already done in travis ***

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.

deploy:
  # release: myproduct-v$(appveyor_build_version)
  description: ''
  provider: GitHub
  auth_token:
    secure: 'SYd5+MMCyCHhSsQ8ZLPnbBC0KbUv/DVDUFTkdCkYd+wJCa2lsxo9w0HzA8Zg11iG' # encrypted token from GitHub
  # artifact: /.*\.nupkg/            # upload all
  draft: false
  prerelease: false
  on:
    branch: master                 # release from master branch only
    appveyor_repo_tag: true        # deploy on tag push only
