language: python

# cache: pip
cache:
  directories:
  - '../Qt5.6'
  - '../PyQt5_gpl-5.6'

python:
  - "3.5"
  - "3.6"

env:
  global:
  - GH_REF: git@github.com:smarie/env-switcher-gui.git

before_install:
  - sudo apt-get install pandoc
  - sudo apt-get install ant
  - sudo apt-get install ant-optional
  - sudo apt-get install rpm
  - sudo apt-get install alien

  # *** install conda - from https://conda.io/docs/user-guide/tasks/use-conda-with-travis-ci.html
  - sudo wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  # - conda update -q conda NO !!!!
  # Uncomment this for debugging conda
  # - conda info -a

  # *** install useful dependencies
  - conda install "python==3.5.4" sip "pip>=9.0.1" "setuptools=36"

  # *** install Qt
  # - conda install "qt==5.6.0" >> linked to ICU, too big ! > we end up with a 80Mo package for envswitch
  # >> build & install Qt from sources
  - cd "$TRAVIS_BUILD_DIR/.."
  - export QT_DIR="$TRAVIS_BUILD_DIR/../Qt5.6"
  - echo $QT_DIR
  # only build qt if needed
  - if [ ! -f "$QT_DIR/lib/libQt5Core.so" ]; then echo "Building Qt5.6 from sources using script $TRAVIS_BUILD_DIR/ci_tools/build_install_qt.sh"; source "$TRAVIS_BUILD_DIR/ci_tools/build_install_qt.sh"; fi;
  - export PATH=$QT_DIR/bin:$PATH

  # 64 bits: install qt directly
#  - sudo wget http://download.qt.io/official_releases/qt/5.6/5.6.3/qt-opensource-linux-x64-5.6.3.run
#  - chmod +x qt-opensource-linux-x64-5.6.3.run
#  - ./qt-opensource-linux-x64-5.6.3.run

  # ********* Compile PyQt ***********
  - cd "$TRAVIS_BUILD_DIR/.."
  - export PYQT_DIR="$TRAVIS_BUILD_DIR/../PyQt5_gpl-5.6"
  - echo $PYQT_DIR
  - if [ ! -d "$PYQT_DIR/Makefile" ]; then echo "Building PyQt5.6 from sources using script $TRAVIS_BUILD_DIR/ci_tools/build_pyqt.sh"; source "$TRAVIS_BUILD_DIR/ci_tools/build_pyqt.sh"; fi;
  - cd "$PYQT_DIR"
  - make install


install:
  - pip install -r ci_tools/requirements-setup.txt
  # Now in order to better control the size of our package, we do not rely on this wheel anymore but we compile PyQt (see above)
  # - pip install pyqt5==5.6  #
  - pip install -r ci_tools/requirements-test.txt
  - pip install -r ci_tools/requirements-report.txt
  - pip install -r ci_tools/requirements-doc.txt
  - pip install codecov    # https://github.com/codecov/example-python. This is specific to travis integration
# - pip install coveralls  # this is an alternative to codecov

script:
# - coverage run tests.py
  - pip install . -v
# ***tests: none for now since travis is linux***
# TODO when done add the badges to readme and index [![Tests Status](https://smarie.github.io/env-switcher-gui/junit/junit-badge.svg?dummy=8484744)](https://smarie.github.io/env-switcher-gui/junit/report.html) [![codecov](https://codecov.io/gh/smarie/env-switcher-gui/branch/master/graph/badge.svg)](https://codecov.io/gh/smarie/env-switcher-gui)
  # - pytest --junitxml=reports/junit/junit.xml --html=reports/junit/report.html --cov-report term-missing --cov=./envswitch -v envswitch/tests/

after_success:
# ***packaging for releases***
  - python setup_cx_app.py build
  - python setup_cx_app.py build bdist_rpm  # the build is done again to generate the _VERSION_ bdist_msi bdist_mac bdist_dmg
  # trying to debug why bdist_rpm does not work : cat the file
  - find . -type f -name 'envswitch.spec' -exec cat {} \;
  - find . -type f -wholename '**/rpm/BUILD/envswitch-*/INSTALLED_FILES' -exec cat {} \;
  # convert the rpm into a deb and move the generated file in dist/ folder
  - find dist/ -type f -iname '*.rpm' -exec sudo alien -d {} \;
  - find . -type f -iname '*.deb' -exec mv {} dist/ \;

  # create a tar.gz in dist/, containing the exe for linux. Rename it envswitch-<version>-linux-...
  # see http://wiki.bash-hackers.org/syntax/pe#search_and_replace
  - find ./build/ -type d -iname 'exe.linux*' -exec bash -c 'tar -zcvf "./dist/envswitch-$(<VERSION__)-${0/.\/build\/exe.}.tar.gz" "$0"' {} \;

# ***reporting***
#  - junit2html junit.xml testrun.html  output is really not nice
  - ant -f ci_tools/generate-junit-html.xml  # generates the html for the test results. Actually we dont use it anymore
  - python ci_tools/generate-junit-badge.py  # generates the badge for the test results
  - codecov
  - pylint envswitch  # note that at the moment the report is simply lost, we dont transform the result into anything
# ***documentation***
  - mkdocs build -f docs/mkdocs.yml
  - mv reports/junit site/
  # mkdocs gh-deploy requires special care :
  # ---grant the possibility to push on the repo---
  - openssl aes-256-cbc -K $encrypted_dd5d82970000_key -iv $encrypted_dd5d82970000_iv -in ci_tools/github_travis_rsa.enc -out ci_tools/github_travis_rsa -d
  - chmod 600 ci_tools/github_travis_rsa
  - eval `ssh-agent -s`  # launch the authentication agent
  - ssh-add ci_tools/github_travis_rsa  # register the key
  - git config user.name "Automatic Publish"
  - git config user.email "sylvain.marie@schneider-electric.com"
  - git remote add gh-remote "${GH_REF}";
  - git fetch gh-remote && git fetch gh-remote gh-pages:gh-pages;
  # push but only if this is not a build triggered by a pull request
  # note: here we use the --dirty flag so that mkdocs does not clean the additional reports that we copied in the site
  - if [ "${TRAVIS_PULL_REQUEST}" = "false" ] && [ "${TRAVIS_PYTHON_VERSION}" = "3.5" ]; then echo "Pushing to github"; PYTHONPATH=envswitch/ mkdocs gh-deploy -v --dirty -f docs/mkdocs.yml --remote-name gh-remote; git push gh-remote gh-pages; fi;
#  - if [ "${TRAVIS_PULL_REQUEST}" = "false" ] && [ "${TRAVIS_PYTHON_VERSION}" = "3.5" ]; then echo "Pushing to github"; git push gh-remote gh-pages; fi;

deploy:
  # the pypi package
  - provider: pypi
    user: "smarie"
    password:
      secure: "OUztM0kmyyh/4IvWQ0AK+8Th00Plj+sObBlDb1387ErHUMGPIF6XqfwlpeWkcn0Ev0ZrCeuY0jN1tOapsYCC2jxUqUXFHJXRFlfUdSBN0D8toyTTMIRZFi5o1j8YzgoIuj3g4J3uRvV6uW+ii7FvaNz705o8U5x4Mp0zz5Dy67AAczApIVEMHjOGdbt4rlPL8xKwgau5xmknDlLn7BejCTmvJhN+5CxzCRvIIvRdNfN43ItVOd0C5WiRydkeV8eJivFcABJX0TGfDOcR/6ds3sLXsdvfpF7UJSWfbV1V6F01e3ikh3Kjg193YBUX0JOlW9+kKnno7lN1Har76ZOQcjMG9P3diT8E6Al7QWyDvsxALWiLmW9mWaeEmnbT8vl4dE+IQlGGa7Vy1uNFbeNjyVzf9AcRi7K9pzka2HKL3lJrAu2Y6Q53fe658EoXXXuLg6teFS+gOAv4V+Bi8ExEyj1ap2Qi5+ohlJcWjBpLoPFnFuHldXuyYJnTfyQgNamt3LCLUmgdaYf8NOBUSKaiCUw9+kLdx3quJk/6phL4xtmfLGdTWVRt7FLiYjzOgd90inWcuCL+xHnBDjGoZBS2pgD1z1HsSEj4476yVnt4yXerm5Q5dBou765yD3TuQcS2i5XkMb4lqHWAZRL0mePL5U6zlDGyAPdTZxRukm65zg8="
    on:
      tags: true
      python: 3.5  #only one of the builds have to be deployed
    # server: https://test.pypi.org/legacy/
    distributions: "sdist bdist_wheel"

  # the release on github
  - provider: releases
    api_key:
      secure: "ernfux/weQKfWKUlRA7dBTeRG9G+eaJGwWTIwNlnGY9uR+LJa3wOXbSworCysST4TFGYDf7jWSbxqetFxyGxK1VRC0nkGn8fzla1lQUr5fNdigMx58DjfF9r2zde+NR5UXgnhQct28jTRsDWtgSVNpE3nomrgXkt4Byv5ek0NR3mS6GoekjjUPoGH0RGQnwtN5A6xDMCizWWVlajIbNoqP3RoAZcPqxmHUiYCLvjqWE9XWOWNXHT5rAPuiI2EUnKUc63z3WshubCdfAvikij0klzO2FQaRAJCKAeJ1HZACP57kHQ9TN/3/K1v/RynYHZ2bRhNumKUue2g5qTFym/m9TVqbz/YhWLTjcpGvUfzeteSmV9ZHYGBXHcH5fCSTmkpzNnEymJDZl8/B5sMW/EXmeB9FwHbMUM5vAZPDP2gsan7YqKriTq2BySWzJQQFLbHGgiq5Fh1lH/YRrow/i1iGljfemHiDPG5cvo9kIKg4vglm4PEAHUbctnjl2t3gd3hdgsZ2PfLf65z3yszZBrRrWCwrdKnC92mzafuziX/rmF1KTPaLBinvBAXURw0+rFLyoLJl10HBQq2M8NIJWgSYs0zef+zz6VFBn8v+DkT/Z+J6CeFcTb3H0IuL6M450QsTAG0pXTIBhuqTUuU6iyA3FRWghN8ub+i6SZY1aIT6g="
    file_glob: true
    file:
      - dist/*linux*.tar.gz
      - dist/*.rpm
    # on:
    #   repo: "smarie/env-switcher-gui"
    skip_cleanup: true
    on:
      tags: true

matrix:
    fast_finish: true

notifications:
  email:
    on_success: never  # options: [always|never|change] default: always
